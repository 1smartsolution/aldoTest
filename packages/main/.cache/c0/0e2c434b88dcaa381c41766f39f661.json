{"id":"../../../node_modules/react-autolink-text2/lib/match_validator.js","dependencies":[{"name":"G:\\Projects\\reactReduxTemplate\\packages\\main\\package.json","includedInParent":true,"mtime":1582380612000},{"name":"G:\\Projects\\reactReduxTemplate\\node_modules\\react-autolink-text2\\package.json","includedInParent":true,"mtime":1593019999779}],"generated":{"js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.isValidMatch = isValidMatch;\nvar uriSchemeRegex = /^[A-Za-z][-.+A-Za-z0-9]+:/;\nvar hasFullProtocolRegex = /^[A-Za-z][-.+A-Za-z0-9]+:\\/\\//;\nvar hasWordCharAfterProtocolRegex = /:[^\\s]*?[A-Za-z]/;\nvar invalidProtocolRelMatchRegex = /^[\\w]\\/\\//;\n\n/**\n * Determines if a given match found by the match parser is valid.\n * Will return `false` for:\n *\n * 1) URL matches which do not have at least have one period ('.') in the\n *    domain name (effectively skipping over matches like \"abc:def\").\n *    However, URL matches with a protocol will be allowed (ex: 'http://localhost')\n * 2) URL matches which do not have at least one word character in the\n *    domain name (effectively skipping over matches like \"git:1.0\").\n * 3) A protocol-relative url match (a URL beginning with '//') whose\n *    previous character is a word character (effectively skipping over\n *    strings like \"abc//google.com\")\n *\n * Otherwise, returns `true`.\n *\n * @param {String} urlMatch The matched URL, if there was one. Will be an\n *   empty string if the match is not a URL match.\n * @param {String} protocolUrlMatch The match URL string for a protocol\n *   match. Ex: 'http://yahoo.com'. This is used to match something like\n *   'http://localhost', where we won't double check that the domain name\n *   has at least one '.' in it.\n * @param {String} protocolRelativeMatch The protocol-relative string for a\n *   URL match (i.e. '//'), possibly with a preceding character (ex, a\n *   space, such as: ' //', or a letter, such as: 'a//'). The match is\n *   invalid if there is a word character preceding the '//'.\n * @return {Boolean} `true` if the match given is valid and should be\n *   processed, or `false` if the match is invalid and/or should just not be\n *   processed.\n */\nfunction isValidMatch(urlMatch, protocolUrlMatch, protocolRelativeMatch) {\n  if (protocolUrlMatch && !isValidUriScheme(protocolUrlMatch) || urlMatchDoesNotHaveProtocolOrDot(urlMatch, protocolUrlMatch) || // At least one period ('.') must exist in the URL match for us to consider it an actual URL, *unless* it was a full protocol match (like 'http://localhost')\n  urlMatchDoesNotHaveAtLeastOneWordChar(urlMatch, protocolUrlMatch) || // At least one letter character must exist in the domain name after a protocol match. Ex: skip over something like \"git:1.0\"\n  isInvalidProtocolRelativeMatch(protocolRelativeMatch) // A protocol-relative match which has a word character in front of it (so we can skip something like \"abc//google.com\")\n  ) {\n      return false;\n    }\n\n  return true;\n}\n\n/**\n * Determines if the URI scheme is a valid scheme to be autolinked. Returns\n * `false` if the scheme is 'javascript:' or 'vbscript:'\n *\n * @private\n * @param {String} uriSchemeMatch The match URL string for a full URI scheme\n *   match. Ex: 'http://yahoo.com' or 'mailto:a@a.com'.\n * @return {Boolean} `true` if the scheme is a valid one, `false` otherwise.\n */\nfunction isValidUriScheme(uriSchemeMatch) {\n  var uriScheme = uriSchemeMatch.match(uriSchemeRegex)[0].toLowerCase();\n\n  return uriScheme !== 'javascript:' && uriScheme !== 'vbscript:';\n}\n\n/**\n * Determines if a URL match does not have either:\n *\n * a) a full protocol (i.e. 'http://'), or\n * b) at least one dot ('.') in the domain name (for a non-full-protocol\n *    match).\n *\n * Either situation is considered an invalid URL (ex: 'git:d' does not have\n * either the '://' part, or at least one dot in the domain name. If the\n * match was 'git:abc.com', we would consider this valid.)\n *\n * @private\n * @param {String} urlMatch The matched URL, if there was one. Will be an\n *   empty string if the match is not a URL match.\n * @param {String} protocolUrlMatch The match URL string for a protocol\n *   match. Ex: 'http://yahoo.com'. This is used to match something like\n *   'http://localhost', where we won't double check that the domain name\n *   has at least one '.' in it.\n * @return {Boolean} `true` if the URL match does not have a full protocol,\n *   or at least one dot ('.') in a non-full-protocol match.\n */\nfunction urlMatchDoesNotHaveProtocolOrDot(urlMatch, protocolUrlMatch) {\n  return !!urlMatch && (!protocolUrlMatch || !hasFullProtocolRegex.test(protocolUrlMatch)) && urlMatch.indexOf('.') === -1;\n}\n\n/**\n * Determines if a URL match does not have at least one word character after\n * the protocol (i.e. in the domain name).\n *\n * At least one letter character must exist in the domain name after a\n * protocol match. Ex: skip over something like \"git:1.0\"\n *\n * @private\n * @param {String} urlMatch The matched URL, if there was one. Will be an\n *   empty string if the match is not a URL match.\n * @param {String} protocolUrlMatch The match URL string for a protocol\n *   match. Ex: 'http://yahoo.com'. This is used to know whether or not we\n *   have a protocol in the URL string, in order to check for a word\n *   character after the protocol separator (':').\n * @return {Boolean} `true` if the URL match does not have at least one word\n *   character in it after the protocol, `false` otherwise.\n */\nfunction urlMatchDoesNotHaveAtLeastOneWordChar(urlMatch, protocolUrlMatch) {\n  if (urlMatch && protocolUrlMatch) {\n    return !hasWordCharAfterProtocolRegex.test(urlMatch);\n  } else {\n    return false;\n  }\n}\n\n/**\n * Determines if a protocol-relative match is an invalid one. This method\n * returns `true` if there is a `protocolRelativeMatch`, and that match\n * contains a word character before the '//' (i.e. it must contain\n * whitespace or nothing before the '//' in order to be considered valid).\n *\n * @private\n * @param {String} protocolRelativeMatch The protocol-relative string for a\n *   URL match (i.e. '//'), possibly with a preceding character (ex, a\n *   space, such as: ' //', or a letter, such as: 'a//'). The match is\n *   invalid if there is a word character preceding the '//'.\n * @return {Boolean} `true` if it is an invalid protocol-relative match,\n *   `false` otherwise.\n */\nfunction isInvalidProtocolRelativeMatch(protocolRelativeMatch) {\n  return !!protocolRelativeMatch && invalidProtocolRelMatchRegex.test(protocolRelativeMatch);\n}"},"sourceMaps":{"js":{"mappings":[{"source":"../../../node_modules/react-autolink-text2/lib/match_validator.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"../../../node_modules/react-autolink-text2/lib/match_validator.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"../../../node_modules/react-autolink-text2/lib/match_validator.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"../../../node_modules/react-autolink-text2/lib/match_validator.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"../../../node_modules/react-autolink-text2/lib/match_validator.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"../../../node_modules/react-autolink-text2/lib/match_validator.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"../../../node_modules/react-autolink-text2/lib/match_validator.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"../../../node_modules/react-autolink-text2/lib/match_validator.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"../../../node_modules/react-autolink-text2/lib/match_validator.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"../../../node_modules/react-autolink-text2/lib/match_validator.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"../../../node_modules/react-autolink-text2/lib/match_validator.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"../../../node_modules/react-autolink-text2/lib/match_validator.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"../../../node_modules/react-autolink-text2/lib/match_validator.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"../../../node_modules/react-autolink-text2/lib/match_validator.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"../../../node_modules/react-autolink-text2/lib/match_validator.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"../../../node_modules/react-autolink-text2/lib/match_validator.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"../../../node_modules/react-autolink-text2/lib/match_validator.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"../../../node_modules/react-autolink-text2/lib/match_validator.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"../../../node_modules/react-autolink-text2/lib/match_validator.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"../../../node_modules/react-autolink-text2/lib/match_validator.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"../../../node_modules/react-autolink-text2/lib/match_validator.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"../../../node_modules/react-autolink-text2/lib/match_validator.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"../../../node_modules/react-autolink-text2/lib/match_validator.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"../../../node_modules/react-autolink-text2/lib/match_validator.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"../../../node_modules/react-autolink-text2/lib/match_validator.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"../../../node_modules/react-autolink-text2/lib/match_validator.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"../../../node_modules/react-autolink-text2/lib/match_validator.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"../../../node_modules/react-autolink-text2/lib/match_validator.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"../../../node_modules/react-autolink-text2/lib/match_validator.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"../../../node_modules/react-autolink-text2/lib/match_validator.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"../../../node_modules/react-autolink-text2/lib/match_validator.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"../../../node_modules/react-autolink-text2/lib/match_validator.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"../../../node_modules/react-autolink-text2/lib/match_validator.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"../../../node_modules/react-autolink-text2/lib/match_validator.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"../../../node_modules/react-autolink-text2/lib/match_validator.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"../../../node_modules/react-autolink-text2/lib/match_validator.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"../../../node_modules/react-autolink-text2/lib/match_validator.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"../../../node_modules/react-autolink-text2/lib/match_validator.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"../../../node_modules/react-autolink-text2/lib/match_validator.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"../../../node_modules/react-autolink-text2/lib/match_validator.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"../../../node_modules/react-autolink-text2/lib/match_validator.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"../../../node_modules/react-autolink-text2/lib/match_validator.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"../../../node_modules/react-autolink-text2/lib/match_validator.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"../../../node_modules/react-autolink-text2/lib/match_validator.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"../../../node_modules/react-autolink-text2/lib/match_validator.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"../../../node_modules/react-autolink-text2/lib/match_validator.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"../../../node_modules/react-autolink-text2/lib/match_validator.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"../../../node_modules/react-autolink-text2/lib/match_validator.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"../../../node_modules/react-autolink-text2/lib/match_validator.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"../../../node_modules/react-autolink-text2/lib/match_validator.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"../../../node_modules/react-autolink-text2/lib/match_validator.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"../../../node_modules/react-autolink-text2/lib/match_validator.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"../../../node_modules/react-autolink-text2/lib/match_validator.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"../../../node_modules/react-autolink-text2/lib/match_validator.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"../../../node_modules/react-autolink-text2/lib/match_validator.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"../../../node_modules/react-autolink-text2/lib/match_validator.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}},{"source":"../../../node_modules/react-autolink-text2/lib/match_validator.js","original":{"line":57,"column":0},"generated":{"line":57,"column":0}},{"source":"../../../node_modules/react-autolink-text2/lib/match_validator.js","original":{"line":58,"column":0},"generated":{"line":58,"column":0}},{"source":"../../../node_modules/react-autolink-text2/lib/match_validator.js","original":{"line":59,"column":0},"generated":{"line":59,"column":0}},{"source":"../../../node_modules/react-autolink-text2/lib/match_validator.js","original":{"line":60,"column":0},"generated":{"line":60,"column":0}},{"source":"../../../node_modules/react-autolink-text2/lib/match_validator.js","original":{"line":61,"column":0},"generated":{"line":61,"column":0}},{"source":"../../../node_modules/react-autolink-text2/lib/match_validator.js","original":{"line":62,"column":0},"generated":{"line":62,"column":0}},{"source":"../../../node_modules/react-autolink-text2/lib/match_validator.js","original":{"line":63,"column":0},"generated":{"line":63,"column":0}},{"source":"../../../node_modules/react-autolink-text2/lib/match_validator.js","original":{"line":64,"column":0},"generated":{"line":64,"column":0}},{"source":"../../../node_modules/react-autolink-text2/lib/match_validator.js","original":{"line":65,"column":0},"generated":{"line":65,"column":0}},{"source":"../../../node_modules/react-autolink-text2/lib/match_validator.js","original":{"line":66,"column":0},"generated":{"line":66,"column":0}},{"source":"../../../node_modules/react-autolink-text2/lib/match_validator.js","original":{"line":67,"column":0},"generated":{"line":67,"column":0}},{"source":"../../../node_modules/react-autolink-text2/lib/match_validator.js","original":{"line":68,"column":0},"generated":{"line":68,"column":0}},{"source":"../../../node_modules/react-autolink-text2/lib/match_validator.js","original":{"line":69,"column":0},"generated":{"line":69,"column":0}},{"source":"../../../node_modules/react-autolink-text2/lib/match_validator.js","original":{"line":70,"column":0},"generated":{"line":70,"column":0}},{"source":"../../../node_modules/react-autolink-text2/lib/match_validator.js","original":{"line":71,"column":0},"generated":{"line":71,"column":0}},{"source":"../../../node_modules/react-autolink-text2/lib/match_validator.js","original":{"line":72,"column":0},"generated":{"line":72,"column":0}},{"source":"../../../node_modules/react-autolink-text2/lib/match_validator.js","original":{"line":73,"column":0},"generated":{"line":73,"column":0}},{"source":"../../../node_modules/react-autolink-text2/lib/match_validator.js","original":{"line":74,"column":0},"generated":{"line":74,"column":0}},{"source":"../../../node_modules/react-autolink-text2/lib/match_validator.js","original":{"line":75,"column":0},"generated":{"line":75,"column":0}},{"source":"../../../node_modules/react-autolink-text2/lib/match_validator.js","original":{"line":76,"column":0},"generated":{"line":76,"column":0}},{"source":"../../../node_modules/react-autolink-text2/lib/match_validator.js","original":{"line":77,"column":0},"generated":{"line":77,"column":0}},{"source":"../../../node_modules/react-autolink-text2/lib/match_validator.js","original":{"line":78,"column":0},"generated":{"line":78,"column":0}},{"source":"../../../node_modules/react-autolink-text2/lib/match_validator.js","original":{"line":79,"column":0},"generated":{"line":79,"column":0}},{"source":"../../../node_modules/react-autolink-text2/lib/match_validator.js","original":{"line":80,"column":0},"generated":{"line":80,"column":0}},{"source":"../../../node_modules/react-autolink-text2/lib/match_validator.js","original":{"line":81,"column":0},"generated":{"line":81,"column":0}},{"source":"../../../node_modules/react-autolink-text2/lib/match_validator.js","original":{"line":82,"column":0},"generated":{"line":82,"column":0}},{"source":"../../../node_modules/react-autolink-text2/lib/match_validator.js","original":{"line":83,"column":0},"generated":{"line":83,"column":0}},{"source":"../../../node_modules/react-autolink-text2/lib/match_validator.js","original":{"line":84,"column":0},"generated":{"line":84,"column":0}},{"source":"../../../node_modules/react-autolink-text2/lib/match_validator.js","original":{"line":85,"column":0},"generated":{"line":85,"column":0}},{"source":"../../../node_modules/react-autolink-text2/lib/match_validator.js","original":{"line":86,"column":0},"generated":{"line":86,"column":0}},{"source":"../../../node_modules/react-autolink-text2/lib/match_validator.js","original":{"line":87,"column":0},"generated":{"line":87,"column":0}},{"source":"../../../node_modules/react-autolink-text2/lib/match_validator.js","original":{"line":88,"column":0},"generated":{"line":88,"column":0}},{"source":"../../../node_modules/react-autolink-text2/lib/match_validator.js","original":{"line":89,"column":0},"generated":{"line":89,"column":0}},{"source":"../../../node_modules/react-autolink-text2/lib/match_validator.js","original":{"line":90,"column":0},"generated":{"line":90,"column":0}},{"source":"../../../node_modules/react-autolink-text2/lib/match_validator.js","original":{"line":91,"column":0},"generated":{"line":91,"column":0}},{"source":"../../../node_modules/react-autolink-text2/lib/match_validator.js","original":{"line":92,"column":0},"generated":{"line":92,"column":0}},{"source":"../../../node_modules/react-autolink-text2/lib/match_validator.js","original":{"line":93,"column":0},"generated":{"line":93,"column":0}},{"source":"../../../node_modules/react-autolink-text2/lib/match_validator.js","original":{"line":94,"column":0},"generated":{"line":94,"column":0}},{"source":"../../../node_modules/react-autolink-text2/lib/match_validator.js","original":{"line":95,"column":0},"generated":{"line":95,"column":0}},{"source":"../../../node_modules/react-autolink-text2/lib/match_validator.js","original":{"line":96,"column":0},"generated":{"line":96,"column":0}},{"source":"../../../node_modules/react-autolink-text2/lib/match_validator.js","original":{"line":97,"column":0},"generated":{"line":97,"column":0}},{"source":"../../../node_modules/react-autolink-text2/lib/match_validator.js","original":{"line":98,"column":0},"generated":{"line":98,"column":0}},{"source":"../../../node_modules/react-autolink-text2/lib/match_validator.js","original":{"line":99,"column":0},"generated":{"line":99,"column":0}},{"source":"../../../node_modules/react-autolink-text2/lib/match_validator.js","original":{"line":100,"column":0},"generated":{"line":100,"column":0}},{"source":"../../../node_modules/react-autolink-text2/lib/match_validator.js","original":{"line":101,"column":0},"generated":{"line":101,"column":0}},{"source":"../../../node_modules/react-autolink-text2/lib/match_validator.js","original":{"line":102,"column":0},"generated":{"line":102,"column":0}},{"source":"../../../node_modules/react-autolink-text2/lib/match_validator.js","original":{"line":103,"column":0},"generated":{"line":103,"column":0}},{"source":"../../../node_modules/react-autolink-text2/lib/match_validator.js","original":{"line":104,"column":0},"generated":{"line":104,"column":0}},{"source":"../../../node_modules/react-autolink-text2/lib/match_validator.js","original":{"line":105,"column":0},"generated":{"line":105,"column":0}},{"source":"../../../node_modules/react-autolink-text2/lib/match_validator.js","original":{"line":106,"column":0},"generated":{"line":106,"column":0}},{"source":"../../../node_modules/react-autolink-text2/lib/match_validator.js","original":{"line":107,"column":0},"generated":{"line":107,"column":0}},{"source":"../../../node_modules/react-autolink-text2/lib/match_validator.js","original":{"line":108,"column":0},"generated":{"line":108,"column":0}},{"source":"../../../node_modules/react-autolink-text2/lib/match_validator.js","original":{"line":109,"column":0},"generated":{"line":109,"column":0}},{"source":"../../../node_modules/react-autolink-text2/lib/match_validator.js","original":{"line":110,"column":0},"generated":{"line":110,"column":0}},{"source":"../../../node_modules/react-autolink-text2/lib/match_validator.js","original":{"line":111,"column":0},"generated":{"line":111,"column":0}},{"source":"../../../node_modules/react-autolink-text2/lib/match_validator.js","original":{"line":112,"column":0},"generated":{"line":112,"column":0}},{"source":"../../../node_modules/react-autolink-text2/lib/match_validator.js","original":{"line":113,"column":0},"generated":{"line":113,"column":0}},{"source":"../../../node_modules/react-autolink-text2/lib/match_validator.js","original":{"line":114,"column":0},"generated":{"line":114,"column":0}},{"source":"../../../node_modules/react-autolink-text2/lib/match_validator.js","original":{"line":115,"column":0},"generated":{"line":115,"column":0}},{"source":"../../../node_modules/react-autolink-text2/lib/match_validator.js","original":{"line":116,"column":0},"generated":{"line":116,"column":0}},{"source":"../../../node_modules/react-autolink-text2/lib/match_validator.js","original":{"line":117,"column":0},"generated":{"line":117,"column":0}},{"source":"../../../node_modules/react-autolink-text2/lib/match_validator.js","original":{"line":118,"column":0},"generated":{"line":118,"column":0}},{"source":"../../../node_modules/react-autolink-text2/lib/match_validator.js","original":{"line":119,"column":0},"generated":{"line":119,"column":0}},{"source":"../../../node_modules/react-autolink-text2/lib/match_validator.js","original":{"line":120,"column":0},"generated":{"line":120,"column":0}},{"source":"../../../node_modules/react-autolink-text2/lib/match_validator.js","original":{"line":121,"column":0},"generated":{"line":121,"column":0}},{"source":"../../../node_modules/react-autolink-text2/lib/match_validator.js","original":{"line":122,"column":0},"generated":{"line":122,"column":0}},{"source":"../../../node_modules/react-autolink-text2/lib/match_validator.js","original":{"line":123,"column":0},"generated":{"line":123,"column":0}},{"source":"../../../node_modules/react-autolink-text2/lib/match_validator.js","original":{"line":124,"column":0},"generated":{"line":124,"column":0}},{"source":"../../../node_modules/react-autolink-text2/lib/match_validator.js","original":{"line":125,"column":0},"generated":{"line":125,"column":0}},{"source":"../../../node_modules/react-autolink-text2/lib/match_validator.js","original":{"line":126,"column":0},"generated":{"line":126,"column":0}},{"source":"../../../node_modules/react-autolink-text2/lib/match_validator.js","original":{"line":127,"column":0},"generated":{"line":127,"column":0}},{"source":"../../../node_modules/react-autolink-text2/lib/match_validator.js","original":{"line":128,"column":0},"generated":{"line":128,"column":0}},{"source":"../../../node_modules/react-autolink-text2/lib/match_validator.js","original":{"line":129,"column":0},"generated":{"line":129,"column":0}},{"source":"../../../node_modules/react-autolink-text2/lib/match_validator.js","original":{"line":130,"column":0},"generated":{"line":130,"column":0}},{"source":"../../../node_modules/react-autolink-text2/lib/match_validator.js","original":{"line":131,"column":0},"generated":{"line":131,"column":0}},{"source":"../../../node_modules/react-autolink-text2/lib/match_validator.js","original":{"line":132,"column":0},"generated":{"line":132,"column":0}},{"source":"../../../node_modules/react-autolink-text2/lib/match_validator.js","original":{"line":133,"column":0},"generated":{"line":133,"column":0}}],"sources":{"../../../node_modules/react-autolink-text2/lib/match_validator.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.isValidMatch = isValidMatch;\nvar uriSchemeRegex = /^[A-Za-z][-.+A-Za-z0-9]+:/;\nvar hasFullProtocolRegex = /^[A-Za-z][-.+A-Za-z0-9]+:\\/\\//;\nvar hasWordCharAfterProtocolRegex = /:[^\\s]*?[A-Za-z]/;\nvar invalidProtocolRelMatchRegex = /^[\\w]\\/\\//;\n\n/**\n * Determines if a given match found by the match parser is valid.\n * Will return `false` for:\n *\n * 1) URL matches which do not have at least have one period ('.') in the\n *    domain name (effectively skipping over matches like \"abc:def\").\n *    However, URL matches with a protocol will be allowed (ex: 'http://localhost')\n * 2) URL matches which do not have at least one word character in the\n *    domain name (effectively skipping over matches like \"git:1.0\").\n * 3) A protocol-relative url match (a URL beginning with '//') whose\n *    previous character is a word character (effectively skipping over\n *    strings like \"abc//google.com\")\n *\n * Otherwise, returns `true`.\n *\n * @param {String} urlMatch The matched URL, if there was one. Will be an\n *   empty string if the match is not a URL match.\n * @param {String} protocolUrlMatch The match URL string for a protocol\n *   match. Ex: 'http://yahoo.com'. This is used to match something like\n *   'http://localhost', where we won't double check that the domain name\n *   has at least one '.' in it.\n * @param {String} protocolRelativeMatch The protocol-relative string for a\n *   URL match (i.e. '//'), possibly with a preceding character (ex, a\n *   space, such as: ' //', or a letter, such as: 'a//'). The match is\n *   invalid if there is a word character preceding the '//'.\n * @return {Boolean} `true` if the match given is valid and should be\n *   processed, or `false` if the match is invalid and/or should just not be\n *   processed.\n */\nfunction isValidMatch(urlMatch, protocolUrlMatch, protocolRelativeMatch) {\n  if (protocolUrlMatch && !isValidUriScheme(protocolUrlMatch) || urlMatchDoesNotHaveProtocolOrDot(urlMatch, protocolUrlMatch) || // At least one period ('.') must exist in the URL match for us to consider it an actual URL, *unless* it was a full protocol match (like 'http://localhost')\n  urlMatchDoesNotHaveAtLeastOneWordChar(urlMatch, protocolUrlMatch) || // At least one letter character must exist in the domain name after a protocol match. Ex: skip over something like \"git:1.0\"\n  isInvalidProtocolRelativeMatch(protocolRelativeMatch) // A protocol-relative match which has a word character in front of it (so we can skip something like \"abc//google.com\")\n  ) {\n      return false;\n    }\n\n  return true;\n}\n\n/**\n * Determines if the URI scheme is a valid scheme to be autolinked. Returns\n * `false` if the scheme is 'javascript:' or 'vbscript:'\n *\n * @private\n * @param {String} uriSchemeMatch The match URL string for a full URI scheme\n *   match. Ex: 'http://yahoo.com' or 'mailto:a@a.com'.\n * @return {Boolean} `true` if the scheme is a valid one, `false` otherwise.\n */\nfunction isValidUriScheme(uriSchemeMatch) {\n  var uriScheme = uriSchemeMatch.match(uriSchemeRegex)[0].toLowerCase();\n\n  return uriScheme !== 'javascript:' && uriScheme !== 'vbscript:';\n}\n\n/**\n * Determines if a URL match does not have either:\n *\n * a) a full protocol (i.e. 'http://'), or\n * b) at least one dot ('.') in the domain name (for a non-full-protocol\n *    match).\n *\n * Either situation is considered an invalid URL (ex: 'git:d' does not have\n * either the '://' part, or at least one dot in the domain name. If the\n * match was 'git:abc.com', we would consider this valid.)\n *\n * @private\n * @param {String} urlMatch The matched URL, if there was one. Will be an\n *   empty string if the match is not a URL match.\n * @param {String} protocolUrlMatch The match URL string for a protocol\n *   match. Ex: 'http://yahoo.com'. This is used to match something like\n *   'http://localhost', where we won't double check that the domain name\n *   has at least one '.' in it.\n * @return {Boolean} `true` if the URL match does not have a full protocol,\n *   or at least one dot ('.') in a non-full-protocol match.\n */\nfunction urlMatchDoesNotHaveProtocolOrDot(urlMatch, protocolUrlMatch) {\n  return !!urlMatch && (!protocolUrlMatch || !hasFullProtocolRegex.test(protocolUrlMatch)) && urlMatch.indexOf('.') === -1;\n}\n\n/**\n * Determines if a URL match does not have at least one word character after\n * the protocol (i.e. in the domain name).\n *\n * At least one letter character must exist in the domain name after a\n * protocol match. Ex: skip over something like \"git:1.0\"\n *\n * @private\n * @param {String} urlMatch The matched URL, if there was one. Will be an\n *   empty string if the match is not a URL match.\n * @param {String} protocolUrlMatch The match URL string for a protocol\n *   match. Ex: 'http://yahoo.com'. This is used to know whether or not we\n *   have a protocol in the URL string, in order to check for a word\n *   character after the protocol separator (':').\n * @return {Boolean} `true` if the URL match does not have at least one word\n *   character in it after the protocol, `false` otherwise.\n */\nfunction urlMatchDoesNotHaveAtLeastOneWordChar(urlMatch, protocolUrlMatch) {\n  if (urlMatch && protocolUrlMatch) {\n    return !hasWordCharAfterProtocolRegex.test(urlMatch);\n  } else {\n    return false;\n  }\n}\n\n/**\n * Determines if a protocol-relative match is an invalid one. This method\n * returns `true` if there is a `protocolRelativeMatch`, and that match\n * contains a word character before the '//' (i.e. it must contain\n * whitespace or nothing before the '//' in order to be considered valid).\n *\n * @private\n * @param {String} protocolRelativeMatch The protocol-relative string for a\n *   URL match (i.e. '//'), possibly with a preceding character (ex, a\n *   space, such as: ' //', or a letter, such as: 'a//'). The match is\n *   invalid if there is a word character preceding the '//'.\n * @return {Boolean} `true` if it is an invalid protocol-relative match,\n *   `false` otherwise.\n */\nfunction isInvalidProtocolRelativeMatch(protocolRelativeMatch) {\n  return !!protocolRelativeMatch && invalidProtocolRelMatchRegex.test(protocolRelativeMatch);\n}"},"lineCount":133}},"error":null,"hash":"21b8942eb69d1363724caffd0e65a09f","cacheData":{"env":{}}}