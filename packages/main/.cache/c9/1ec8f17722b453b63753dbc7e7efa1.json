{"id":"../../../node_modules/react-autolink-text2/lib/match_parser.js","dependencies":[{"name":"G:\\Projects\\reactReduxTemplate\\packages\\main\\package.json","includedInParent":true,"mtime":1582380612000},{"name":"G:\\Projects\\reactReduxTemplate\\node_modules\\react-autolink-text2\\package.json","includedInParent":true,"mtime":1593019999779},{"name":"./match_validator","loc":{"line":50,"column":31},"parent":"G:\\Projects\\reactReduxTemplate\\node_modules\\react-autolink-text2\\lib\\match_parser.js","resolved":"G:\\Projects\\reactReduxTemplate\\node_modules\\react-autolink-text2\\lib\\match_validator.js"},{"name":"./url_match","loc":{"line":52,"column":25},"parent":"G:\\Projects\\reactReduxTemplate\\node_modules\\react-autolink-text2\\lib\\match_parser.js","resolved":"G:\\Projects\\reactReduxTemplate\\node_modules\\react-autolink-text2\\lib\\url_match.js"}],"generated":{"js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"]) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError(\"Invalid attempt to destructure non-iterable instance\"); } }; }();\n\nexports.default = function (text) {\n  var disableUrlStripping = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n\n  var regex = new RegExp(urlRegex, 'gi');\n  var matches = [];\n\n  var match;\n  while ((match = regex.exec(text)) !== null) {\n    var _match = match,\n        _match2 = _slicedToArray(_match, 5),\n        matchedText = _match2[0],\n        protocolMailtoMatch = _match2[1],\n        protocolUrlMatch = _match2[2],\n        wwwProtocolRelativeMatch = _match2[3],\n        tldProtocolRelativeMatch = _match2[4];\n\n    var protocolRelativeMatch = wwwProtocolRelativeMatch || tldProtocolRelativeMatch;\n\n    // If it's a protocol-relative '//' match, remove the character\n    // before the '//' (which the matcherRegex needed to match due to\n    // the lack of a negative look-behind in JavaScript regular\n    // expressions)\n    if (protocolRelativeMatch) {\n      var charBeforeMatch = protocolRelativeMatch.match(charBeforeProtocolRelMatchRegex)[1] || '';\n\n      // fix up the `matchStr` if there was a preceding char before a protocol-relative match, which was needed to determine the match itself (since there are no look-behinds in JS regexes)\n      if (charBeforeMatch) {\n        matchedText = matchedText.slice(1); // remove the prefixed char from the match\n        match.index++;\n      }\n    }\n\n    if ((0, _match_validator.isValidMatch)(matchedText, protocolUrlMatch, protocolRelativeMatch)) {\n      var position = { start: match.index, end: regex.lastIndex };\n      matches.push(new _url_match2.default(matchedText, protocolMailtoMatch, protocolUrlMatch, protocolRelativeMatch, position, disableUrlStripping));\n    }\n  }\n\n  return matches;\n};\n\nvar _match_validator = require('./match_validator');\n\nvar _url_match = require('./url_match');\n\nvar _url_match2 = _interopRequireDefault(_url_match);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n// match protocol, allow in format \"http://\" or \"mailto:\". However, do not match\n// the first part of something like 'link:http://www.google.com' (i.e. don't match \"link:\").\n// Also, make sure we don't interpret 'google.com:8000' as if 'google.com' was a\n// protocol here (i.e. ignore a trailing port number in this regex)\nvar protocolRegex = /(?:[A-Za-z][-.+A-Za-z0-9]+:(?![A-Za-z][-.+A-Za-z0-9]+:\\/\\/)(?!\\d+\\/?)(?:\\/\\/)?)/;\n\n// starting with 'www.'\nvar wwwRegex = /(?:www\\.)/;\n\n// anything looking at all like a domain, non-unicode domains, not ending in a period\nvar domainNameRegex = /[A-Za-z0-9.-]*[A-Za-z0-9-]/;\n\n// anything looking like an email address\nvar mailboxRegex = /(?:(?:[^<>()\\\\[\\]\\\\.,;:\\s@\"]+(?:\\.[^<>()\\\\[\\]\\\\.,;:\\s@\"]+)*)|(?:\".+\"))@(?:(?:\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(?:(?:[a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))/;\n\n// match our known top level domains (TLDs)\nvar tldRegex = /\\.(?:international|construction|contractors|enterprises|photography|productions|foundation|immobilien|industries|management|properties|technology|christmas|community|directory|education|equipment|institute|marketing|solutions|vacations|bargains|boutique|builders|catering|cleaning|clothing|computer|democrat|diamonds|graphics|holdings|lighting|partners|plumbing|supplies|training|ventures|academy|careers|company|cruises|domains|exposed|flights|florist|gallery|guitars|holiday|kitchen|neustar|okinawa|recipes|rentals|reviews|shiksha|singles|support|systems|agency|berlin|camera|center|coffee|condos|dating|estate|events|expert|futbol|kaufen|luxury|maison|monash|museum|nagoya|photos|repair|report|social|supply|tattoo|tienda|travel|viajes|villas|vision|voting|voyage|actor|build|cards|cheap|codes|dance|email|glass|house|mango|ninja|parts|photo|shoes|solar|today|tokyo|tools|watch|works|aero|arpa|asia|best|bike|blue|buzz|camp|club|cool|coop|farm|fish|gift|guru|info|jobs|kiwi|kred|land|limo|link|menu|mobi|moda|name|pics|pink|post|qpon|rich|ruhr|sexy|tips|vote|voto|wang|wien|wiki|zone|bar|bid|biz|cab|cat|ceo|com|edu|gov|int|kim|mil|net|onl|org|pro|pub|red|tel|uno|wed|xxx|xyz|ac|ad|ae|af|ag|ai|al|am|an|ao|aq|ar|as|at|au|aw|ax|az|ba|bb|bd|be|bf|bg|bh|bi|bj|bm|bn|bo|br|bs|bt|bv|bw|by|bz|ca|cc|cd|cf|cg|ch|ci|ck|cl|cm|cn|co|cr|cu|cv|cw|cx|cy|cz|de|dj|dk|dm|do|dz|ec|ee|eg|er|es|et|eu|fi|fj|fk|fm|fo|fr|ga|gb|gd|ge|gf|gg|gh|gi|gl|gm|gn|gp|gq|gr|gs|gt|gu|gw|gy|hk|hm|hn|hr|ht|hu|id|ie|il|im|in|io|iq|ir|is|it|je|jm|jo|jp|ke|kg|kh|ki|km|kn|kp|kr|kw|ky|kz|la|lb|lc|li|lk|lr|ls|lt|lu|lv|ly|ma|mc|md|me|mg|mh|mk|ml|mm|mn|mo|mp|mq|mr|ms|mt|mu|mv|mw|mx|my|mz|na|nc|ne|nf|ng|ni|nl|no|np|nr|nu|nz|om|pa|pe|pf|pg|ph|pk|pl|pm|pn|pr|ps|pt|pw|py|qa|re|ro|rs|ru|rw|sa|sb|sc|sd|se|sg|sh|si|sj|sk|sl|sm|sn|so|sr|st|su|sv|sx|sy|sz|tc|td|tf|tg|th|tj|tk|tl|tm|tn|to|tp|tr|tt|tv|tw|tz|ua|ug|uk|us|uy|uz|va|vc|ve|vg|vi|vn|vu|wf|ws|ye|yt|za|zm|zw)\\b/;\n\n// Allow optional path, query string, and hash anchor, not ending in the following characters: \"?!:,.;\"\n// http://blog.codinghorror.com/the-problem-with-urls/\nvar urlSuffixRegex = /[-A-Za-z0-9+&@#/%=~_()|'$*[\\]?!:,.;]*[-A-Za-z0-9+&@#/%=~_()|'$*[\\]]/;\n\nvar charBeforeProtocolRelMatchRegex = /^(.)?\\/\\//;\n\n/* eslint-disable indent */\nvar urlRegex = ['(?:', // parens to cover match for protocol (optional), and domain\n\n'(', // *** Capturing group $1, for a protocol-prefixed url (ex: http://google.com)\nprotocolRegex.source, mailboxRegex.source, ')', '|', '(', // *** Capturing group $1, for a protocol-prefixed url (ex: http://google.com)\nprotocolRegex.source, domainNameRegex.source, ')', '|', '(?:', // non-capturing paren for a 'www.' prefixed url (ex: www.google.com)\n'(.?//)?', // *** Capturing group $2 for an optional protocol-relative URL. Must be at the beginning of the string or start with a non-word character\nwwwRegex.source, domainNameRegex.source, ')', '|', '(?:', // non-capturing paren for known a TLD url (ex: google.com)\n'(.?//)?', // *** Capturing group $3 for an optional protocol-relative URL. Must be at the beginning of the string or start with a non-word character\ndomainNameRegex.source, tldRegex.source, ')', ')', '(?:' + urlSuffixRegex.source + ')?'].join('');\n/* eslint-enable indent */"},"sourceMaps":{"js":{"mappings":[{"source":"../../../node_modules/react-autolink-text2/lib/match_parser.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"../../../node_modules/react-autolink-text2/lib/match_parser.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"../../../node_modules/react-autolink-text2/lib/match_parser.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"../../../node_modules/react-autolink-text2/lib/match_parser.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"../../../node_modules/react-autolink-text2/lib/match_parser.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"../../../node_modules/react-autolink-text2/lib/match_parser.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"../../../node_modules/react-autolink-text2/lib/match_parser.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"../../../node_modules/react-autolink-text2/lib/match_parser.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"../../../node_modules/react-autolink-text2/lib/match_parser.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"../../../node_modules/react-autolink-text2/lib/match_parser.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"../../../node_modules/react-autolink-text2/lib/match_parser.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"../../../node_modules/react-autolink-text2/lib/match_parser.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"../../../node_modules/react-autolink-text2/lib/match_parser.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"../../../node_modules/react-autolink-text2/lib/match_parser.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"../../../node_modules/react-autolink-text2/lib/match_parser.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"../../../node_modules/react-autolink-text2/lib/match_parser.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"../../../node_modules/react-autolink-text2/lib/match_parser.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"../../../node_modules/react-autolink-text2/lib/match_parser.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"../../../node_modules/react-autolink-text2/lib/match_parser.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"../../../node_modules/react-autolink-text2/lib/match_parser.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"../../../node_modules/react-autolink-text2/lib/match_parser.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"../../../node_modules/react-autolink-text2/lib/match_parser.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"../../../node_modules/react-autolink-text2/lib/match_parser.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"../../../node_modules/react-autolink-text2/lib/match_parser.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"../../../node_modules/react-autolink-text2/lib/match_parser.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"../../../node_modules/react-autolink-text2/lib/match_parser.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"../../../node_modules/react-autolink-text2/lib/match_parser.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"../../../node_modules/react-autolink-text2/lib/match_parser.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"../../../node_modules/react-autolink-text2/lib/match_parser.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"../../../node_modules/react-autolink-text2/lib/match_parser.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"../../../node_modules/react-autolink-text2/lib/match_parser.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"../../../node_modules/react-autolink-text2/lib/match_parser.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"../../../node_modules/react-autolink-text2/lib/match_parser.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"../../../node_modules/react-autolink-text2/lib/match_parser.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"../../../node_modules/react-autolink-text2/lib/match_parser.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"../../../node_modules/react-autolink-text2/lib/match_parser.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"../../../node_modules/react-autolink-text2/lib/match_parser.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"../../../node_modules/react-autolink-text2/lib/match_parser.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"../../../node_modules/react-autolink-text2/lib/match_parser.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"../../../node_modules/react-autolink-text2/lib/match_parser.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"../../../node_modules/react-autolink-text2/lib/match_parser.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"../../../node_modules/react-autolink-text2/lib/match_parser.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"../../../node_modules/react-autolink-text2/lib/match_parser.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"../../../node_modules/react-autolink-text2/lib/match_parser.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"../../../node_modules/react-autolink-text2/lib/match_parser.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"../../../node_modules/react-autolink-text2/lib/match_parser.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"../../../node_modules/react-autolink-text2/lib/match_parser.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"../../../node_modules/react-autolink-text2/lib/match_parser.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"../../../node_modules/react-autolink-text2/lib/match_parser.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"../../../node_modules/react-autolink-text2/lib/match_parser.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"../../../node_modules/react-autolink-text2/lib/match_parser.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"../../../node_modules/react-autolink-text2/lib/match_parser.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"../../../node_modules/react-autolink-text2/lib/match_parser.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"../../../node_modules/react-autolink-text2/lib/match_parser.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"../../../node_modules/react-autolink-text2/lib/match_parser.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"../../../node_modules/react-autolink-text2/lib/match_parser.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}},{"source":"../../../node_modules/react-autolink-text2/lib/match_parser.js","original":{"line":57,"column":0},"generated":{"line":57,"column":0}},{"source":"../../../node_modules/react-autolink-text2/lib/match_parser.js","original":{"line":58,"column":0},"generated":{"line":58,"column":0}},{"source":"../../../node_modules/react-autolink-text2/lib/match_parser.js","original":{"line":59,"column":0},"generated":{"line":59,"column":0}},{"source":"../../../node_modules/react-autolink-text2/lib/match_parser.js","original":{"line":60,"column":0},"generated":{"line":60,"column":0}},{"source":"../../../node_modules/react-autolink-text2/lib/match_parser.js","original":{"line":61,"column":0},"generated":{"line":61,"column":0}},{"source":"../../../node_modules/react-autolink-text2/lib/match_parser.js","original":{"line":62,"column":0},"generated":{"line":62,"column":0}},{"source":"../../../node_modules/react-autolink-text2/lib/match_parser.js","original":{"line":63,"column":0},"generated":{"line":63,"column":0}},{"source":"../../../node_modules/react-autolink-text2/lib/match_parser.js","original":{"line":64,"column":0},"generated":{"line":64,"column":0}},{"source":"../../../node_modules/react-autolink-text2/lib/match_parser.js","original":{"line":65,"column":0},"generated":{"line":65,"column":0}},{"source":"../../../node_modules/react-autolink-text2/lib/match_parser.js","original":{"line":66,"column":0},"generated":{"line":66,"column":0}},{"source":"../../../node_modules/react-autolink-text2/lib/match_parser.js","original":{"line":67,"column":0},"generated":{"line":67,"column":0}},{"source":"../../../node_modules/react-autolink-text2/lib/match_parser.js","original":{"line":68,"column":0},"generated":{"line":68,"column":0}},{"source":"../../../node_modules/react-autolink-text2/lib/match_parser.js","original":{"line":69,"column":0},"generated":{"line":69,"column":0}},{"source":"../../../node_modules/react-autolink-text2/lib/match_parser.js","original":{"line":70,"column":0},"generated":{"line":70,"column":0}},{"source":"../../../node_modules/react-autolink-text2/lib/match_parser.js","original":{"line":71,"column":0},"generated":{"line":71,"column":0}},{"source":"../../../node_modules/react-autolink-text2/lib/match_parser.js","original":{"line":72,"column":0},"generated":{"line":72,"column":0}},{"source":"../../../node_modules/react-autolink-text2/lib/match_parser.js","original":{"line":73,"column":0},"generated":{"line":73,"column":0}},{"source":"../../../node_modules/react-autolink-text2/lib/match_parser.js","original":{"line":74,"column":0},"generated":{"line":74,"column":0}},{"source":"../../../node_modules/react-autolink-text2/lib/match_parser.js","original":{"line":75,"column":0},"generated":{"line":75,"column":0}},{"source":"../../../node_modules/react-autolink-text2/lib/match_parser.js","original":{"line":76,"column":0},"generated":{"line":76,"column":0}},{"source":"../../../node_modules/react-autolink-text2/lib/match_parser.js","original":{"line":77,"column":0},"generated":{"line":77,"column":0}},{"source":"../../../node_modules/react-autolink-text2/lib/match_parser.js","original":{"line":78,"column":0},"generated":{"line":78,"column":0}},{"source":"../../../node_modules/react-autolink-text2/lib/match_parser.js","original":{"line":79,"column":0},"generated":{"line":79,"column":0}},{"source":"../../../node_modules/react-autolink-text2/lib/match_parser.js","original":{"line":80,"column":0},"generated":{"line":80,"column":0}},{"source":"../../../node_modules/react-autolink-text2/lib/match_parser.js","original":{"line":81,"column":0},"generated":{"line":81,"column":0}},{"source":"../../../node_modules/react-autolink-text2/lib/match_parser.js","original":{"line":82,"column":0},"generated":{"line":82,"column":0}},{"source":"../../../node_modules/react-autolink-text2/lib/match_parser.js","original":{"line":83,"column":0},"generated":{"line":83,"column":0}},{"source":"../../../node_modules/react-autolink-text2/lib/match_parser.js","original":{"line":84,"column":0},"generated":{"line":84,"column":0}},{"source":"../../../node_modules/react-autolink-text2/lib/match_parser.js","original":{"line":85,"column":0},"generated":{"line":85,"column":0}},{"source":"../../../node_modules/react-autolink-text2/lib/match_parser.js","original":{"line":86,"column":0},"generated":{"line":86,"column":0}},{"source":"../../../node_modules/react-autolink-text2/lib/match_parser.js","original":{"line":87,"column":0},"generated":{"line":87,"column":0}},{"source":"../../../node_modules/react-autolink-text2/lib/match_parser.js","original":{"line":88,"column":0},"generated":{"line":88,"column":0}},{"source":"../../../node_modules/react-autolink-text2/lib/match_parser.js","original":{"line":89,"column":0},"generated":{"line":89,"column":0}},{"source":"../../../node_modules/react-autolink-text2/lib/match_parser.js","original":{"line":90,"column":0},"generated":{"line":90,"column":0}},{"source":"../../../node_modules/react-autolink-text2/lib/match_parser.js","original":{"line":91,"column":0},"generated":{"line":91,"column":0}},{"source":"../../../node_modules/react-autolink-text2/lib/match_parser.js","original":{"line":92,"column":0},"generated":{"line":92,"column":0}}],"sources":{"../../../node_modules/react-autolink-text2/lib/match_parser.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"]) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError(\"Invalid attempt to destructure non-iterable instance\"); } }; }();\n\nexports.default = function (text) {\n  var disableUrlStripping = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n\n  var regex = new RegExp(urlRegex, 'gi');\n  var matches = [];\n\n  var match;\n  while ((match = regex.exec(text)) !== null) {\n    var _match = match,\n        _match2 = _slicedToArray(_match, 5),\n        matchedText = _match2[0],\n        protocolMailtoMatch = _match2[1],\n        protocolUrlMatch = _match2[2],\n        wwwProtocolRelativeMatch = _match2[3],\n        tldProtocolRelativeMatch = _match2[4];\n\n    var protocolRelativeMatch = wwwProtocolRelativeMatch || tldProtocolRelativeMatch;\n\n    // If it's a protocol-relative '//' match, remove the character\n    // before the '//' (which the matcherRegex needed to match due to\n    // the lack of a negative look-behind in JavaScript regular\n    // expressions)\n    if (protocolRelativeMatch) {\n      var charBeforeMatch = protocolRelativeMatch.match(charBeforeProtocolRelMatchRegex)[1] || '';\n\n      // fix up the `matchStr` if there was a preceding char before a protocol-relative match, which was needed to determine the match itself (since there are no look-behinds in JS regexes)\n      if (charBeforeMatch) {\n        matchedText = matchedText.slice(1); // remove the prefixed char from the match\n        match.index++;\n      }\n    }\n\n    if ((0, _match_validator.isValidMatch)(matchedText, protocolUrlMatch, protocolRelativeMatch)) {\n      var position = { start: match.index, end: regex.lastIndex };\n      matches.push(new _url_match2.default(matchedText, protocolMailtoMatch, protocolUrlMatch, protocolRelativeMatch, position, disableUrlStripping));\n    }\n  }\n\n  return matches;\n};\n\nvar _match_validator = require('./match_validator');\n\nvar _url_match = require('./url_match');\n\nvar _url_match2 = _interopRequireDefault(_url_match);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n// match protocol, allow in format \"http://\" or \"mailto:\". However, do not match\n// the first part of something like 'link:http://www.google.com' (i.e. don't match \"link:\").\n// Also, make sure we don't interpret 'google.com:8000' as if 'google.com' was a\n// protocol here (i.e. ignore a trailing port number in this regex)\nvar protocolRegex = /(?:[A-Za-z][-.+A-Za-z0-9]+:(?![A-Za-z][-.+A-Za-z0-9]+:\\/\\/)(?!\\d+\\/?)(?:\\/\\/)?)/;\n\n// starting with 'www.'\nvar wwwRegex = /(?:www\\.)/;\n\n// anything looking at all like a domain, non-unicode domains, not ending in a period\nvar domainNameRegex = /[A-Za-z0-9.-]*[A-Za-z0-9-]/;\n\n// anything looking like an email address\nvar mailboxRegex = /(?:(?:[^<>()\\\\[\\]\\\\.,;:\\s@\"]+(?:\\.[^<>()\\\\[\\]\\\\.,;:\\s@\"]+)*)|(?:\".+\"))@(?:(?:\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(?:(?:[a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))/;\n\n// match our known top level domains (TLDs)\nvar tldRegex = /\\.(?:international|construction|contractors|enterprises|photography|productions|foundation|immobilien|industries|management|properties|technology|christmas|community|directory|education|equipment|institute|marketing|solutions|vacations|bargains|boutique|builders|catering|cleaning|clothing|computer|democrat|diamonds|graphics|holdings|lighting|partners|plumbing|supplies|training|ventures|academy|careers|company|cruises|domains|exposed|flights|florist|gallery|guitars|holiday|kitchen|neustar|okinawa|recipes|rentals|reviews|shiksha|singles|support|systems|agency|berlin|camera|center|coffee|condos|dating|estate|events|expert|futbol|kaufen|luxury|maison|monash|museum|nagoya|photos|repair|report|social|supply|tattoo|tienda|travel|viajes|villas|vision|voting|voyage|actor|build|cards|cheap|codes|dance|email|glass|house|mango|ninja|parts|photo|shoes|solar|today|tokyo|tools|watch|works|aero|arpa|asia|best|bike|blue|buzz|camp|club|cool|coop|farm|fish|gift|guru|info|jobs|kiwi|kred|land|limo|link|menu|mobi|moda|name|pics|pink|post|qpon|rich|ruhr|sexy|tips|vote|voto|wang|wien|wiki|zone|bar|bid|biz|cab|cat|ceo|com|edu|gov|int|kim|mil|net|onl|org|pro|pub|red|tel|uno|wed|xxx|xyz|ac|ad|ae|af|ag|ai|al|am|an|ao|aq|ar|as|at|au|aw|ax|az|ba|bb|bd|be|bf|bg|bh|bi|bj|bm|bn|bo|br|bs|bt|bv|bw|by|bz|ca|cc|cd|cf|cg|ch|ci|ck|cl|cm|cn|co|cr|cu|cv|cw|cx|cy|cz|de|dj|dk|dm|do|dz|ec|ee|eg|er|es|et|eu|fi|fj|fk|fm|fo|fr|ga|gb|gd|ge|gf|gg|gh|gi|gl|gm|gn|gp|gq|gr|gs|gt|gu|gw|gy|hk|hm|hn|hr|ht|hu|id|ie|il|im|in|io|iq|ir|is|it|je|jm|jo|jp|ke|kg|kh|ki|km|kn|kp|kr|kw|ky|kz|la|lb|lc|li|lk|lr|ls|lt|lu|lv|ly|ma|mc|md|me|mg|mh|mk|ml|mm|mn|mo|mp|mq|mr|ms|mt|mu|mv|mw|mx|my|mz|na|nc|ne|nf|ng|ni|nl|no|np|nr|nu|nz|om|pa|pe|pf|pg|ph|pk|pl|pm|pn|pr|ps|pt|pw|py|qa|re|ro|rs|ru|rw|sa|sb|sc|sd|se|sg|sh|si|sj|sk|sl|sm|sn|so|sr|st|su|sv|sx|sy|sz|tc|td|tf|tg|th|tj|tk|tl|tm|tn|to|tp|tr|tt|tv|tw|tz|ua|ug|uk|us|uy|uz|va|vc|ve|vg|vi|vn|vu|wf|ws|ye|yt|za|zm|zw)\\b/;\n\n// Allow optional path, query string, and hash anchor, not ending in the following characters: \"?!:,.;\"\n// http://blog.codinghorror.com/the-problem-with-urls/\nvar urlSuffixRegex = /[-A-Za-z0-9+&@#/%=~_()|'$*[\\]?!:,.;]*[-A-Za-z0-9+&@#/%=~_()|'$*[\\]]/;\n\nvar charBeforeProtocolRelMatchRegex = /^(.)?\\/\\//;\n\n/* eslint-disable indent */\nvar urlRegex = ['(?:', // parens to cover match for protocol (optional), and domain\n\n'(', // *** Capturing group $1, for a protocol-prefixed url (ex: http://google.com)\nprotocolRegex.source, mailboxRegex.source, ')', '|', '(', // *** Capturing group $1, for a protocol-prefixed url (ex: http://google.com)\nprotocolRegex.source, domainNameRegex.source, ')', '|', '(?:', // non-capturing paren for a 'www.' prefixed url (ex: www.google.com)\n'(.?//)?', // *** Capturing group $2 for an optional protocol-relative URL. Must be at the beginning of the string or start with a non-word character\nwwwRegex.source, domainNameRegex.source, ')', '|', '(?:', // non-capturing paren for known a TLD url (ex: google.com)\n'(.?//)?', // *** Capturing group $3 for an optional protocol-relative URL. Must be at the beginning of the string or start with a non-word character\ndomainNameRegex.source, tldRegex.source, ')', ')', '(?:' + urlSuffixRegex.source + ')?'].join('');\n/* eslint-enable indent */"},"lineCount":92}},"error":null,"hash":"0664083b7aaba59cd31b813b59872335","cacheData":{"env":{}}}